# Music Classification Model - .gitignore
# =====================================
# Author: Sergie Code - Software Engineer & YouTube Programming Educator
# Project: AI Tools for Musicians
# Date: August 29, 2025

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For PyCharm
#  Community Edition, use 'PyCharm CE' instead of 'PyCharm'.
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# Machine Learning / AI Specific
# ===============================

# PyTorch model checkpoints and saved models
*.pth
*.pt
*.pkl
*.pickle

# But keep example models for demonstration
!models/example_*.pth
!models/demo_*.pth

# TensorBoard logs
logs/
runs/
tb_logs/
tensorboard_logs/
lightning_logs/

# Weights & Biases
wandb/

# MLflow
mlruns/

# Data files
# ==========

# Raw audio files
*.wav
*.mp3
*.flac
*.m4a
*.aac
*.ogg
*.wma

# Processed data files
*.npy
*.npz
*.h5
*.hdf5

# Feature files
*_features.json
*_features.csv

# Spectrograms
*_spectrogram.npy
*_mel.npy

# Large datasets
data/raw/
data/processed/
data/train/
data/val/
data/test/
data/splits/

# But keep example and demo data
!data/examples/
!data/demo/
!examples/dummy_*

# Model outputs and experiments
# =============================

# Training outputs
output/
outputs/
results/
experiments/
checkpoints/

# Generated plots and figures
*.png
*.jpg
*.jpeg
*.pdf
*.svg

# But keep documentation images
!docs/images/
!README_images/
!assets/

# Temporary files
# ===============

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows specific
*.tmp
*.temp
desktop.ini

# Audio processing temporary files
*.temp.wav
*.processing
*.lock

# Configuration and secrets
# =========================

# Local configuration files
config/local_*
.env.local
.env.production

# API keys and secrets
secrets.json
api_keys.txt
*.key

# Database files
*.db
*.sqlite
*.sqlite3

# Custom project specific
# =======================

# Large model files (use Git LFS instead)
models/*.pth
models/*.pt
models/large_*

# But keep small example models
!models/example_model_for_api.pth

# Preprocessing cache
.preprocessing_cache/
cache/

# Audio analysis cache
.librosa_cache/
.audio_cache/

# Custom logs
*.log
training_*.txt

# Jupyter notebook outputs
*.ipynb
!examples/*.ipynb
!tutorials/*.ipynb

# Documentation build
docs/build/
docs/_build/

# Package build
build/
dist/
*.egg-info/

# IDE specific
.spyderproject
.ropeproject

# Audio datasets (too large for git)
datasets/
audio_data/
music_files/

# But keep sample files for testing
!data/samples/
!test_data/

# Backup files
*.bak
*.backup
*~

# Profiling data
*.prof

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Virtual environments
venv*/
conda_env/
music_env/

# Final notes:
# ===========
# - Use Git LFS for large model files if needed: git lfs track "*.pth"
# - Consider using DVC for data version control
# - Keep README and documentation images
# - Example files should be small and educational
